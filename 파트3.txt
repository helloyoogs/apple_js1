1.틀린그림 찾기능력이 향상되는 Destructuring 문법
*Array 안에 있는 데이터를 변수에 담는 방법
[2,3,4]라는 array가 있는데,
여기안에 있는 3개의 데이터들을 전부 밖으로 꺼내서 변수에 담고 싶으면 어떻게 합니까.
var array = [2,3,4];
var a = array[0]; 
var b = array[1];
근데 더 쉽게할 수 있는 방법이 있습니다. 
var [a,b,c] = [2,3,4];
[2,3,4]라는 자료랑 비슷한 모양으로 변수를 선언해주시면 됩니다. 
변수 이름은 아무렇게나 해주시면 되고요. 
그럼 a,b,c 변수가 세개 생성되는데 각각 2,3,4라는 자료를 가집니다. 
array에서 데이터 끄집어내서 변수 생성 끝입니다. 

*디폴트 값도 줄 수 있습니다. 
당연히 왼쪽 오른쪽 갯수가 다르면 변수가 제대로 만들어지지 않습니다. 
var [a,b,c] = [2,3];
위처럼 쓰시면 c라는 변수는 값이 할당이 안되어서 undefined가 할당되어있습니다. 
이걸 방지하고 싶으면
값이 아무것도 안들어오는 변수들은 기본값을 가질 수 있게 만들 수 있습니다. 
var [a,b,c = 5] = [2,3];
그럼 c는 아무 값도 안들어오는 경우 5라는 기본값을 할당해줍니다. 
함수 배웠을 때 쓰던 default 파라미터 문법과 똑같이 쓰시면 됩니다. 

*Object 안에 있는 데이터를 변수에 담는 방법
object도 좌우를 똑같이 맞춰주시면 변수가 생성됩니다. 
var { name : a, age : b } = { name : 'Kim', age : 30 };
이렇게 하시면 됩니다. 
그럼 a, b라는 변수가 생성되고 Kim과 30이라는 자료를 각각 할당해줍니다. 

변수 이름을 오브젝트 안의 key 이름과 똑같이 맞춰줄 때는 이렇게만 쓰셔도 됩니다. 
var { name, age } = { name : 'Kim', age : 30 };
name : name을 name 이렇게 하나로 생략이 가능합니다. 
이렇게 하시면 name, age라는 변수가 생성되고
각각 Kim, 30이라는 값을 할당해줍니다. 
object에서 변수꺼내기 끝입니다. 
+ array랑 똑같이 등호로 디폴트값도 적용가능합니다. 

*이번엔 변수를 object로 집어넣고 싶은 경우
var name = 'Kim';
var age = 30;
var obj = { name : name, age : age }
변수를 object 자료형에 집어넣고 싶은 경우 이런 식으로 쓰면 되겠죠?
하지만 destructuring 문법을 이용하시면 이런 것도 가능합니다. 
var name = 'Kim';
var age = 30;

var obj = { name, age }
name : name 이렇게 key값과 value값이 동일하면
name 이렇게 하나로 생략이 가능합니다.

*함수 파라미터 변수 만들 때도 똑같이 적용가능합니다. 
함수가 하나 있는데 이 함수는 두개의 파라미터를 입력할 수 있습니다. 
여기에 object 내의 Kim, 그리고 age 자료들을 입력하고 싶으면 어떻게 할까요? 
function 함수(name, age){
  console.log(name);
  console.log(age);
}

var obj = { name : 'Kim', age : 20 }
함수(obj.name, obj.age);
아마 obj.name 이걸 직접 집어넣고 그러면 되겠죠? 
혹은 destructuring 문법을 쓰시면 됩니다. 

function 함수( { name, age }){
  console.log(name);
  console.log(age);
}

var obj = { name : 'Kim', age : 20 };
함수(obj);
아마 obj.name, obj.name 이걸 두개 뽑지 않고도 넣을 수 있습니다. 
왜냐면 파라미터는 실은 변수만드는 거랑 똑같은 행위기 때문에 
변수만드는 문법을 그대로 적용할 수 있는 것이지요.
파라미터를 입력할 때
{name, age} = { name : 'Kim', age : 20 }
이거 한거랑 똑같습니다.  (솔직히 많이 쓰진 않습니다)
이해가 안되면 조금 더 쉬운 array를 보도록 합시다. 
함수 파라미터로 array 내의 데이터들을 집어넣고 싶으면 어떻게 하죠?
function 함수( name, age ){
  console.log(name);
  console.log(age);
}

var array = [ 'Kim', 30 ];
함수(array[0], array[1]);
위처럼 해도 되지만 
destructuring 문법을 이용하시면 
function 함수( [name, age] ){
  console.log(name);
  console.log(age);
}

var array = [ 'Kim', 30 ];
함수( ['Kim', 30] );
이렇게 하셔도 됩니다. 
파라미터인 [name, age] 를 만들 때 ['Kim', 30] 이걸 그대로 대입해서 만드는 것이죠.
그럼 각각 name과 age에는 Kim과 30이라는 데이터가 들어갑니다. 

2강 import / export 를 이용한 파일간 모듈식 개발
(1)여러개를 export 할 수도 있습니다
export 라는 키워드를 여러번 쓰시면 됩니다. 
(library.js)

var a = 10;
var b = 20;
export {a, b};

------------------------
(index.html)

<script type="module">
  import {a,b} from 'library.js';
  console.log(a);
</script>
근데 export 라고 쓰실 땐 
export {변수명1, 변수명2 ...} 이렇게 담아주셔야합니다.
혹은 export var a = 10; 이렇게 쓰셔도 됩니다. 

export 키워드로 내보낸 것들을 import 하실 땐 
import {변수명1, 변수명2 ...} from '경로' 이렇게 가져오셔야합니다. 

export default와 차이점은..
- export default는 한번만 쓸 수 있고 import시엔 변수명을 새롭게 작명가능하다
- export는 {변수명1, 변수명2 ...} 이렇게 담아야하고 import 할 때도 정확히 변수명을 써줘야한다

(2)그럼 export와 export default 동시에 사용하면?
(library.js)

var a = 10;
var b = 20;
var c = 30;
export {a, b};
export default c;

------------------------
(index.html)

<script type="module">
  import c, {a,b} from 'library.js';
  console.log(c);
</script>

(3)변수명이 마음에 안들면 as로 새로 짓자
(library.js)

var a = 10;
var c = 30;
export {a};
export default c;

------------------------
(index.html)

<script type="module">
  import c, {a as 폭발} from 'library.js';
  console.log(폭발);
</script>

(4) import할 때 변수들이 너무 많으면 * 기호를 씁시다
(library.js)

var a = 10;
var b = 20;
var c = 30;
export {a,b};
export default c;

------------------------
(index.html)

<script type="module">
  import c, * as 변수모음 from 'library.js';
  console.log(변수모음.a);
  console.log(c);
</script>

4강 동기/비동기처리와 콜백함수라는 용어 깔끔하게 정리
*자바스크립트는 항상 동기식 처리 (synchronous) :  한번에 코드 한줄씩 차례차례 실행
ex) <script>
  console.log(1); 
  console.log(2); 
  console.log(3);
</script>

*비동기처리 (asynchronous)라는 것도 가능합니다
자바스크립트에서 1초 후에 코드를 실행하고 싶으면 어떻게 하죠?
console.log(1);
setTimeout(function(){
  console.log(2);
}, 1000);
console.log(3);
저렇게 setTimeout 안에 콜백함수안에 코드를 짜면 된다고 배우지 않았습니까. 
그러면 콘솔창에 1과 3이 먼저 빠르게 출현하고 그 다음 1초 후에 2라는 숫자가 출현합니다. 

*콜백함수 디자인하는 법
예를 들면 순차적으로 실행하고 싶은 함수가 두개 있다고 칩시다. 
그럼 이렇게 코드짜면 될까요?
function 첫째함수(콜백){
  console.log(1);
  콜백();
}

function 둘째함수(){
  console.log(2)
}
함수에 파라미터를 하나 뚫어주시면 됩니다.
그리고 그 파라미터에 소괄호를 붙여서 실행해주세요~ 라고 하면 함수안에 함수를 집어넣어서 실행이 가능합니다. 
이게 콜백함수 디자인하는 법입니다. 
순차적으로 실행하려고 콜백함수를 여러개 사용하면 단점이 조금 있습니다. 
코드가 옆으로 길어집니다. 

첫째함수(function(){
  둘째함수(function(){
    셋째함수(function(){
      어쩌구..
    });
  });
}):
첫째함수 둘째함수 셋째함수 이렇게 차례로 실행해주는 코드입니다. 
특히 자바스크립트로 서버개발시 이런 패턴 흔합니다. 
이런거 보기싫으시면 ES6 신문법인 Promise라는 기계를 만들어 사용하시면 됩니다. 

콜백대신 쓸 수 있는 Promise 디자인 패턴을 적용하면 어떻게 되냐면

첫째함수().then(function(){
   그 담에 실행할거
}).then(function(){
   그 담에 실행할거
});
옆으로 길어지지 않고 then이라는 키워드 덕분에 그나마 뭘 하는지도 파악이 쉬워집니다. 

5강 인간의 언어로 설명하는 ES6 Promise
*Promise 생김새 맛보기
var 프로미스 = new Promise();

프로미스.then(function(){

}).catch(function(){

});

*Promise의 정확한 뜻과 사용법
성공하면 then(), 실패하면 catch()를 실행해주세요~
라는 코드를 짤 수 있게 도와주는게 바로 Promise입니다. 
그래서 Promise를 를 쉽게 정의하자면 성공&실패 판정기계입니다.
Promise 안에서 성공/실패를 판정하는 방법은 쉽습니다. 그대로 따라쓰시면 됩니다. 
var 프로미스 = new Promise(function(성공, 실패){
  성공();
});

프로미스.then(function(){

}).catch(function(){

});

예시1. 힘든 수학연산 성공 후에 특정 코드를 실행하려면?
var 프로미스 = new Promise(function(성공, 실패){
  var 어려운연산 = 1 + 1;
  성공(어려운연산);
});

프로미스.then(function(결과){
  console.log('연산이 성공했습니다' + 결과)
}).catch(function(){
  console.log('실패했습니다')
});
then 함수 안에서 파라미터의 형태로 그 결과를 사용하실 수 있습니다. 

*예시2. 1초 대기 성공 후에 특정 코드를 실행하려면?
var 프로미스 = new Promise(function(성공, 실패){
  setTimeout(function(){
    성공();
  }, 1000);
});

프로미스.then(function(){
  console.log('1초 대기 성공했습니다')
}).catch(function(){
  console.log('실패했습니다')
});
*Promise의 몇가지 특징
1. 일단 new Promise()로 생성된 변수를 콘솔창에 출력해보시면 현재 상태를 알 수 있습니다. 
성공/실패 판정 전에는 <pending> 이라고 나오며
성공 후엔  <resolved> 실패 후엔 <rejected> 이런 식으로 나옵니다.
그리고 성공을 실패나 대기상태로 다시 되돌릴 순 없습니다.

2. Promise는 동기를 비동기로 만들어주는 코드가 아닙니다. 
Promise는 비동기적 실행과 전혀 상관이 없습니다.
그냥 코딩을 예쁘게 할 수 있는 일종의 디자인 패턴입니다.
예를 들면.. Promise 안에 10초 걸리는 어려운 연산을 시키면 10초동안 브라우저가 멈춥니다.
10초 걸리는 연산을 해결될 때 까지 대기실에 제껴두고 그런거 아닙니다. 

(그냥 원래 자바스크립트는 평상시엔 동기적으로 실행이 되며 비동기 실행을 지원하는 특수한 함수들
덕분에 가끔 비동기적 실행이 될 뿐입니다.) 

7강 Promise 어려워서 싫으면 async/await을사용합시다
*async 키워드를 쓰면 Promise 오브젝트가 절로 생성됩니다. 
말그대로입니다. new Promise() 어쩌구 하실 필요가 없습니다.
근데 이 키워드는 function 선언 앞에만 붙일 수 있습니다.  
async function 어려운연산 (){
  1 + 1 
}
그럼 이 함수 자체가 Promise가 되어버립니다. 
그래서 이 함수를 실행할 때 뒤에 then을 붙일 수 있습니다. Promise니까요. 
(함수를 실행하면 그 자리에 Promise 인스턴스 (new Promise() 로 만든 오브젝트)가 남습니다. )
async function 더하기(){
  1 + 1 
}

더하기().then(function(){
  console.log('더하기 성공했어요')
});
그럼 이제 Promise 만들 때 했던거 처럼 then을 붙여서 더하기() 함수가 성공한 뒤에 뭔가를 실행시킬 수 있습니다. 

함수안에서 연산한 결과를 then 안에서 사용하고 싶다면 
async function 더하기(){
  return 1 + 1 
}

더하기().then(function(결과){
  console.log(결과)
});
이렇게하시면 됩니다.
return 오른쪽에 결과를 적어주시면 됩니다. 그럼 then함수까지 전해집니다
 
*then() 함수가 귀찮다면 await 키워드를 쓸 수 있습니다. 
async 키워드를 쓴 함수 안에서는 await을 사용가능합니다. 
await은 그냥 프로미스.then() 대체품으로 생각하시면 됩니다. 
하지만 then보다 훨씬 문법이 간단합니다. 

어떤 function 안에서 어려운 연산을 실행한 뒤에 성공/실패를 판정해주는 Promise를 만들고 싶습니다. 
그럼 어떻게 합니까.
async function 더하기(){
  var 어려운연산 = new Promise((성공, 실패)=>{
    var 결과 = 1 + 1;
    성공();
  });
  어려운연산.then();
}
더하기();
많이 했던 패턴대로 이렇게하시면 됩니다.
(혹은 Promise 만들기 귀찮으면 어려운연산을 함수로 만든 후 async를 쓰시면 됩니다)

그럼 이제 어려운연산.then() 이렇게 성공시 특정 코드를 실행할 수 있습니다. 
근데 .then()이게 너무 복잡해서 보기 싫으시면 
await이라는 키워드를 이용가능합니다. 

async function 더하기(){
  var 어려운연산 = new Promise((성공, 실패)=>{
    var 결과 = 1 + 1;
    성공();
  });
  var 결과 = await 어려운연산;
}
더하기();
어려운연산.then() 과 매우 유사한 문법입니다. 
정확한 뜻은 어려운연산 Promise를 기다린 다음에 완료되면 결과를 변수에 담아주세요 
입니다. 

연산 결과를 출력하거나 그러고 싶다면 
성공 함수에 파라미터를 담아주시면 된다고 했죠?

async function 더하기(){
  var 어려운연산 = new Promise((성공, 실패)=>{
    var 결과 = 1 + 1;
    성공(결과);
  });
  var 결과 = await 어려운연산;
  console.log(결과);
}
더하기();

성공()함수 안에 있던 2라는 파라미터는
var 결과라는 변수에 저장됩니다. 
그럼 Promise의 연산 결과를 출력해볼 수도 있겠네요. 
(주의) 비동기식처리되는 코드를 담는다면 await 기다리는 동안 브라우저가 잠깐 멈출 수 있습니다.

*await은 실패하면 에러가 나고 코드가 멈춥니다
Promise가 실패하는 하단 코드를 실행해봅시다.
async function 더하기(){
  var 어려운연산 = new Promise((성공, 실패)=>{
    실패();
  });
  var 결과 = await 어려운연산;
  console.log(결과);
}
더하기();
어려운연산이라는 Promise가 실패할 경우
await 어려운연산이라는 코드는 에러가 나고 코드실행을 멈춥니다.
그럼 await 하단에 있는 코드들은 더 이상 실행이 되지 않겠죠.

그래서 Promise가 실패할 경우
코드실행을 멈추고 싶지 않으면 약간 특별한 방법이 필요합니다. 

async function 더하기(){
  var 어려운연산 = new Promise((성공, 실패)=>{
    실패();
  });
  try {  var 결과 = await 어려운연산 }
  catch { 어려운연산 Promise가 실패할 경우 실행할 코드 }
}
try catch라는 자바스크립트 문법인데,
try {} 안의 코드가 에러가 나고 멈출 경우
대신 catch {} 내부의 코드를 실행해줍니다. 

이렇게 에러처리를 하실 수 있습니다. 더 복잡하니까 그냥 then() 이런거 쓰셈 
어려운연산이라는 Promise가 실패()가 안날거라고 자신하면 try/catch를 굳이 쓸 필요는 없으니 코드가 더 간단해질 수도 있습니다. 

8강 for in / for of 반복문과 enumerable, iterable 속성
*for in 반복문은 Object에 사용합니다. 
Object 자료형에 저장된 자료들을 하나씩 꺼내고 싶을 때 사용합니다. 
var 오브젝트 = { name : 'Kim', age : 30 };

for (var key in 오브젝트) {
  console.log(오브젝트[key]);
}
이렇게 사용합니다. 
(key라는건 변수명입니다. 여러분이 마음대로 작명하시면 됩니다.)
그럼 반복문은 오브젝트라는 자료 내부 데이터 갯수만큼 반복하게 되며
반복할 때마다 key라는 변수는 name, age 이렇게 데이터의 key값이 됩니다. 
그럼 반복시마다 변경되는 key 값을 이용하면 오브젝트 내의 자료를 모두 출력할 수 있습니다.
단순하게 오브젝트.key를 콘솔창에 출력하면 되는데, 변수명을 저렇게 쩜찍고 쓸 수는 없으니
오브젝트[key] 라고 사용하시면 됩니다. 오브젝트에서 자료 꺼내기 끝입니다. 

*for in 반복문의 특징 1. enumerable한 것만 출력해줍니다
여러분이 object 자료형을 만들 때
{ name : 'Kim' } 이걸 저장하면 Kim 이라는 자료만 달랑 저장되는게 아닙니다. 
Kim과 함께 비밀스러운 속성들 3개가 저장됩니다. 
var 오브젝트 = { name : 'Kim', age : 30 };

console.log( Object.getOwnPropertyDescriptor(오브젝트, 'name') ); 
비밀스런 속성 3개를 출력해보고 싶으면 위처럼 쓰시면 됩니다. 
그럼 콘솔창에 뭐 이런게 나오죠?
{value: "Kim", writable: true, enumerable: true, configurable: true} 
이것이 Kim과 함께 몰래 저장되는 속성들입니다.
(그래서 Object 자료형이 좀 무겁습니다)
여기서 enumerable이라는게 있는데, 이게 true인 자료들만 for in 반복문이 출력할 수 있습니다.
이걸 강제로 false로 만들면 for in 반복문이 거릅니다. 
아무튼 이런 동작원리를 가진게 바로 for in 반복문입니다. 
-enumerable을 번역하면 '셀수있는' 이라는 뜻입니다.

*for in 반복문의 특징 2. 부모의 prototype에 저장된 것도 출력해줍니다.
object의 부모의 유전자에 있는 속성도 반복문으로 출력해줍니다. 
class 부모 {
 
}
부모.prototype.name = 'Park';

var 오브젝트 = new 부모();

for (var key in 오브젝트) {
  console.log(오브젝트[key]);
}
Park이라는 자료는 부모가 가지고 있는 것인데도 출력해줍니다. 
이런게 싫으시다면 if문을 추가해주셔야합니다. 
class 부모 {
 
}
부모.prototype.name = 'Park';

var 오브젝트 = new 부모();

for (var key in 오브젝트) {
  if (오브젝트.hasOwnProperty(key)) {
    console.log(오브젝트[key]);
  }
}
오브젝트.hasOwnProperty()라는 함수는
오브젝트가 이 key값을 직접 가지고 있냐라고 물어보는 함수입니다. 
갖고 있으면 true, 없으면 false를 뱉어줍니다. 
그래서 내가 가진 것만 반복시키고 싶으면 이걸 꼭 쓰셔야합니다. 

*for of 반복문 
사용해봅시다. for in 반복문과 매우 유사합니다. 
var 어레이 = [2,3,4,5];
for (var 자료 of 어레이) {
  console.log(자료);
}
이러면 어레이 안에 있던 모든 자료를 하나씩 콘솔창에 출력할 수 있군요.
array 자료형 뿐만 아니라 
array, 문자, arguments, NodeList, Map, Set 이라는 자료형에 적용할 수 있는 반복문입니다. 

근데 정확히 말하면 iterable인 자료형들에만 적용가능한 반복문입니다. 
iterable한 자료형이 뭐냐면 
[Symbol.iterator]() 이라는 일종의 메소드를 가지고 있는 자료형들을 뜻합니다. 

var 어레이 = [2,3,4,5];
console.log( 어레이[Symbol.iterator]() );
array 자료형 뒤에 붙이면 뭔가 출력되긴 하죠?
문자도 그렇습니다. 
실은 반복문 출력을 도와주는 일종의 함수인데 실용성은 없어서 깊게 이해할 필요는 없고 
이걸 가지고 있으면 for of 반복문을 쓸 수 있구나~라고만 아시면 됩니다. 

for of는 NodeList라는 곳에도 사용할 수 있는데 
우리가 흔히 document.getElementsByClassName()이나 document.querySelectorAll() 이런 셀렉터로 찾은 요소들이
[] 대괄호안에 담겨오는데 array는 아니고 NodeList라는 자료형이라고 부릅니다. 
NodeList에 있는 HTML요소들을 하나씩 꺼내서 처리할 때
매우 자주 쓸 수 있는 반복문이라고 보시면 됩니다. 
(하지만 for of의 호환성 주의)

9강 Symbol 자료형은 쓸모없어보이는데 왜 있는거죠
*Symbol 자료형 만드는 법 
var 심볼 = Symbol('설명아무거나적기');
Symbol() 함수를 이용하시면 되고 안에 아무 설명이나 적으시면 됩니다. 심볼만들기 끝!
그냥 주석(설명)하나만 달랑 저장할 수 있는 자료형입니다.

*Symbol은 Object자료형에 비밀스런 key값을 부여하고싶을 때 씁니다. 
ES6부터는 Symbol도 key값으로 입력할 수 있습니다. 
person[심볼명] = 넣을자료;
이렇게 쓰시면 Object자료형에 Symbol을 이름으로 가진 자료를 저장가능합니다.
var person = { name : 'Kim' };
person.weight = 100;

var weight = Symbol('내 진짜 몸무게');
person[weight] = 200;

console.log(person);
위의 예제코드는 Symbol을 key값, 200을 value값으로 오브젝트에 집어넣은 예제입니다. 
출력해보면 { Symbol(내 진짜 몸무게) : 200 } 이라는 자료가 들어가있을겁니다.
이렇게 특이한 이름을 가진 자료를 Object안에 만들고 싶을 때 Symbol을 쓰시면 됩니다. 

이 자료는 특징이 있는데, 
for문에 등장하지 않는다는겁니다.
보통 Object를 반복문을 돌릴 때 for in 이런걸 사용하는데 Symbol은 반복문에서 감지하지 못합니다. 
그래서 시크릿한 내용을 저장하고 싶을 때 Symbol을 이용해서 자료를 저장하시면 됩니다. 

*심볼을 직접 입력하려면 
심볼을 오브젝트 만들 때 직접 입력할 수도 있습니다. 
var height = Symbol('내 키임');

var person = { name : 'Kim', [height] : 160 };
Object 자료형에 직접 입력하실 때는 저렇게 대괄호안에 심볼명을 담아주시면 됩니다. 

*Symbol 자료형 특징1. 설명은 설명일 뿐
Symbol() 안에는 간단한 설명을 저장할 수 있다고 했습니다. 
근데 같은 설명을 가졌다고 해서 같은 Symbol이 아닙니다. 
각각 다른겁니다. 
var a = Symbol('설명1');
var b = Symbol('설명1');
console.log(a === b);
 
위의 예제에서 a와 b 심볼은 설명이 같음에도 불구하고
두개를 같다고 비교해보면 false가 남습니다. 
Symbol은 Symbol()이라고 사용할 때마다 각각 유니크한 Symbol이 생성되서 그렇습니다. 

*Symbol 자료형 특징2. Symbol.for()로 만드는 전역심볼
변수처럼 뭔가 같은값을 가지면 같은 변수로 취급해주는
전역 심볼을 만들어쓸 수 있습니다. 
그러고 싶으면 Symbol() 대신에 Symbol.for() 로 만드시면 됩니다. 
var a = Symbol.for('설명1');
var b = Symbol.for('설명1');
console.log(a === b);
위의 예제를 출력해보면 true라는 값이 남습니다. 
왜냐면 Symbol.for()로 새로운 Symbol을 만들 때
설명이 같으면 이미 그 설명을 가지고 있는 Symbol을 그 자리에 집어넣기 때문입니다. 
그래서 a와 b의 심볼은 각각 다른 곳에서 만들었음에도 불구하고 같은 Symbol이 됩니다. 

*Symbol 자료형 특징3. 기본 내장 Symbol들
Array, Object 자료형을 만들 때 몰래 붙어있는 기본 Symbol 들도 있습니다. 
예를 들면 모든 array 자료형은 [Symbol.iterator]라는 이름을 가진 심볼이 안에 있습니다.
궁금하면 아무 array나 만들고 한번 저걸 출력해보십시오. 
(Symbol을 출력하고 싶으면 오브젝트[심볼명] 이렇게 하시면 됩니다)

var array = [2,3,4];
console.log(array[Symbol.iterator]);

10강 매우 짧게 알아보는 Map, Set 자료형
*매핑을 할 수 있는 Map 자료형
Object자료형과 똑같이 key, value 형태로 자료를 저장할 수 있는 자료형입니다. 
어떻게 만드냐면 
var person = new Map();
person.set('name', 'Kim');
person.set('age', 20);
이렇게 만들고 자료를 저장할 수 있습니다. 
그럼 name은 Kim
age는 20이라는 자료가 저장됩니다. 
근데 출력해보시면 Object와는 약간 다릅니다. 

화살표로 나타내줍니다. 
왜냐면 Map 자료형은 자료의 연관성을 표현하기 위해 쓰기 때문입니다. 
그냥 key, value형식으로 저장하려면 Object 쓰시면 되고,
name이 Kim과 연관되어있다~ 라고 저장하고 싶으면 Map을 쓰시면 됩니다.
다시한번 강조하면 자료들 간의 연관성을 표현하기 위해 쓰는 자료형이 바로 Map입니다. 

*그래서 Map 자료형은 key, value값에 모든 자료를 집어넣을 수 있습니다. 
key값란에 별걸 다 집어넣을 수 있다는 소리입니다. 
var person = new Map();
person.set([1,2,3], 'Kim');
person.set('age', 20);
자료의 이름으로 array도 되고 object도 됩니다. 
단순하게 자료의 이름이라기보다는
Map은 이 값이 저 값과 연관되어있다~ 라는걸 표현하기 위함이니까요. 

*Map 다루는 법 
var person = new Map();
person.set('age', 20);

person.get('age'); //자료 꺼내는 법
person.delete('age'); //자료 삭제하는 법
person.size; //자료 몇갠지 알려줌

//Map자료 반복문 돌리기
for (var key of person.keys() ){
  console.log(key)
}
//자료를 직접 집어넣고 싶으면

var person = new Map([
  ['age', 20],
  ['name', 'Kim']
]); 
이렇게 다룰 수 있습니다. 
때에 따라 평생 쓸일이 없을 수도 있습니다. 
평소에 개발할 땐 여기까지만 알고계시면 되는데 
실은 알고리즘 공부를 하게 된다면 Map 자료형을 다시 만나게 될 겁니다.
array 같은 곳에 자료를 저장할 때 자료가 천만개 1억개 이상으로 많으면 Hash Map, Hash Table 이라는걸 사용합니다.
왜냐면 1억개 자료가 저장된 array에서 원하는 것만 쏙 뽑고 싶으면 반복문을 돌리든가 해서 1억개를 전부 들춰봐야하니까요. 

var array = [1,5,34,67,43,2,213,8] 
이런 자료에서 2라는 자료가 어딨는지 찾고싶으면 어떻게합니까.
몇번째인지 모르니까 반복문 돌려서 하나하나 출력해봐야하는 것입니다. 그래서 느리다는 겁니다. 

근데 Hash Table 이런걸 쓰면 자료를 미리 abc 순으로 정돈이 가능한데 
abc 순으로 정돈된 자료는 매우 찾기 빠릅니다.
왜 빠르냐고요? 여러분 종이 영어사전에서 단어 찾을 때도 abc 알파벳 순으로 정렬되어있어서 빠르게 찾을 수 있잖아요.  
그래서 자료가 1억개고 거기서 원하는걸 찾을 일이 많으면 Hash Table을 사용합니다. 
자료에 key값을 부여해놓고 정렬하면 그게 Hash Table 만들기 끝입니다. 
실은 여태까지 잘 쓰던 object 자료형이 Hash Table이랑 비슷합니다. 

근데 Hash Table을 만들기 위해선 쌩 자바스크립트 object 자료 쓰면 되긴 하는데
1. object 자료형은 hasOwnProperty, toString 이런 키들도 집어넣을 수 있어서 너무 유연하고
2. key값으로 들어올 수 있는게 문자형태로 제한되어있어서
Map 자료형을 사용합니다. 그냥 new Map() 쓰면 끝임 
가끔 Map 이라는 클래스를 직접 똑같이 만들어보는 것도 좋은 연습문제로 등장합니다.

*Set 자료형
간단한 Array 자료형과 똑같이 생겼습니다.
자료를 일렬로 쭉 저장할 수 있습니다. 
이렇게 만들 수 있습니다. 
var 출석부2 = new Set([ 'john' , 'tom', 'andy', 'tom' ]);
console.log(출석부2);
 
출력해보면 아시겠지만 중괄호로 표현이 되죠? 
중괄호지만 Array와 유사하게 생겼습니다. 

또 다른 특징은 이 자료형은 중복자료를 절대 허용하지 않습니다. 
실수로 tom이라는걸 두개 집어넣었었는데, 지금 tom은 하나만 출력됩니다. 
이렇게 중복 데이터를 방지하고 싶을 때 쓰시면 유용한 자료형입니다. 

*Set 자료형 다루기
var 출석부2 = new Set([ 'john' , 'tom', 'andy', 'tom' ]);

출석부2.add('sally'); //자료더하기 
출석부2.has('tom'); //자료있는지 확인
출석부2.size;  //자료 몇갠지 세기
물론 반복문도 돌릴 수 있습니다. forEach 혹은 for of 반복문을 씁니다. 
Set은 Map보다는 그나마 많이 씁니다.

*특히 Array의 데이터 중복제거할 때 많이 씁니다.
왜냐면 Array를 Set으로 바꾸는게 매우 쉽기 때문입니다. 
한번 Array에 있는 중복데이터를 제거해봅시다. 

var 출석부 = [ 'john' , 'tom', 'andy', 'tom' ];
var 출석부2 = new Set(출석부); //Array를 Set으로 바꾸기

출석부 = [...출석부2]  //Set을 Array로 바꾸기

이런 패턴으로 많이 합니다.
위의 예제는 출석부라는 Array자료형을 Set으로 바꿨다가 다시 바로 Array로 바꾸는 예제입니다.
그럼 이제 출석부에 있던 중복자료들이 자동으로 제거가 됩니다. 

11강 Web Components : 커스텀 HTML 태그 만들기
*커스텀 html 태그 만드는 법 
예를 들어서 <custom-input> 이라고 입력하면
<label><input> 이렇게 2개의 태그가 안에 출현하게 만들고 싶어진 것입니다. 
그럼 어떻게 코드를 짜야하는지 알아봅시다. 

<custom-input> 같은 커스텀 태그를 이제부터 컴포넌트라고 칭할겁니다.
컴포넌트를 만들고 싶으면 이런 형식에 따라서 그대로 타이핑만 하면 됩니다.
이건 정해진 문법이라 이해할 필요는 없고 따라치면 됩니다. 
class 클래스 extends HTMLElement {

   connectedCallback() {
      this.innerHTML = '<label>이름을 입력하쇼</label><input>'
   }
}

customElements.define("custom-input", 클래스);
<custom-input></custom-input>
 

1. 컴포넌트에 어떤 html들을 집어넣을지 맘대로 설정 가능합니다.
class와 extend 문법 저렇게 그대로 써주시면 되고 (class명 작명가능)
안에는 connectedCallback() 이라는 함수안에 
여러분의 커스텀 html을 막 꾸미면 됩니다. 
(참고) connectedCallback() 함수는 컴포넌트가 html에 장착될 때 실행됩니다.

2. html 만들고 싶으면 쌩자바스크립트로 html 만드는 문법 가져다 쓰면 됩니다.

3. customElements.define() 처럼 써주시면 컴포넌트 등록이 가능합니다.
(컴포넌트 이름 작명시 보통 대시기호 넣는게 관습입니다)

▲ 그럼 브라우저에서 개발자도구로 검사해보면
<custom-input> 이라고 쓸 때마다 <label> <input> 이것들이 남습니다.
이것이 html을 컴포넌트로 축약해서 쓸 수 있는 Web Component 문법입니다. 

*attribute를 추가하면 각각 다른 내용을 보여줄 수도 있습니다.
<custom-input> 쓸 때마다 같은 코드만 나오니까 쓸모없어보인다고요?
그러면 attribute를 추가해서 쓸 때마다 각각 다른 내용을 보여줄 수도 있습니다. 
class 클래스 extends HTMLElement {

   connectedCallback() {
      let name = this.getAttribute('name');
      this.innerHTML = '<label>${name}을 입력하쇼</label><input>'
   }
}

customElements.define("custom-input", 클래스);
<custom-input name="이메일"></custom-input>
<custom-input name="비번"></custom-input>

getAttribute(X)를 쓰면 현재 요소의 X라고 정의된 attribute를 가져올 수 있습니다.
그래서 name attribute가 있으면 그걸 가져와서 <label>안에 넣으라고 코드를 짜놨습니다.
그랬더니 <custom-input name="비번"></custom-input> 이렇게 쓰면 "비번을 입력하쇼"
<custom-input name="이메일"></custom-input> 이렇게 쓰면 "이메일을 입력하쇼" 라고 출력됩니다. 
attribute 활용하시면 각각 다른 내용을 보여줄 수 있습니다.

*attribute가 변경될 때 특정 코드 실행도 가능합니다.
class 클래스 extends HTMLElement {

   connectedCallback() {
      let name = this.getAttribute('name');
      this.innerHTML = '<label>${name}을 입력하쇼</label><input>'
   }

   static get observedAttributes() {
       return ['name']
   }
   attributeChangedCallback() {
       (attribute 변경시 실행할 코드)
   }
}

customElements.define("custom-input", 클래스);
 
static get observedAttributes() 안에 감시할 attribute들을 array로 적으면 됩니다.
그럼 그게 변경되는 순간 밑에 있는 attributeChangedCallback() 함수를 실행해줍니다.
제가 임의로 만든게 아니라 이런 함수명들이 미리 다 정해져있으니 복사해서 쓰면 됩니다. 

그럼 React, Vue에서 제공하는 자동 html 재렌더링 기능도 쌩 자바스크립트만으로 구현할 수 있는 것입니다.
attribute 변경시 html을 업데이트해주는 코드를 실행하면 끝 아니겠습니까. 
그럼 새로고침없이도 html에 변경사항을 바로바로 반영할 수 있게 됩니다. 
근데 재렌더링 그런건 React, Vue 이런걸로 웹앱을 안만들어보셨다면 아직 알 필요는 없습니다.

React, Vue와 다른 점은 
많이들 좋아라하는 React, Vue도 똑같은 기능을 제공합니다.
React도 html을 하나로 묶어서 component로 만들어서 재사용이 가능합니다. 
하지만 React는 웹앱을 만드는 라이브러리라 용도가 약간 다릅니다.
React는 state가 변할 경우 자동으로 html 재렌더링해주는 기능도 제공하고 
React는 virtual DOM을 이용해서 재렌더링을 매우 빠르고 효율적으로 도와줍니다.
하지만 문법이 약간 더러울 뿐
Vue는 더 정돈된 느낌이고 깔끔합니다.

12강 shadow DOM과 template으로 HTML 모듈화하기
*가끔 보면 복잡한 HTML 태그가 있는데
<input type="range">
이런거 쓰면 되게 복잡한 레이아웃이 나옵니다.
실제로 내부적으로도 여러개의 <div>를 이용해서 만들어진 것인데
이걸 진짜 확인하고 싶으면 크롬 개발자도구 - 설정 - show user agent shadow DOM 켜기 이런거 체크해놓으면 됩니다.

▲ <input type="range"> 안에 진짜로 <div> 3개가 숨어있습니다.
이걸 shadow DOM 이라고 하는데 "일반적으로는 볼 수 없는 숨겨진 HTML"을 의미합니다.

*shadow DOM 만드는 법
<div class="mordor"></div>
<script>
  document.querySelector('mordor').attachShadow({mode : 'open'});
  document.querySelector('mordor').shadowRoot.innerHTML = '<p>심연에서왔도다</p>'
</script>
이러면 <div> 안에 몰래 <p>를 숨길 수 있습니다.
1. 우선 attachShadow() 라는걸 써서 shadowRoot 라는 공간을 하나 만들어줍니다.
2. shadowRoot 여기에 원하는 html 넣으면 숨겨집니다.

거의 모든 <태그>는 shadowRoot를 오픈할 수 있고 
shadowRoot안에 넣은걸 전부 shadow DOM 이라고 칭하는데
이걸 굳이 써야할 이유를 모르겠고 별 장점은 없어보이지만
web component 문법과 합해야 진가를 발휘합니다.

*Web Component의 단점 : 스타일 오염
Web Component 쓰면 html 함수처럼 묶어서 재사용할 수 있다고 했는데
여기에 스타일을 넣고 싶을 경우 약간 문제가 생길 수 있습니다. 

class 클래스 extends HTMLElement {
  connectedCallback() {
    this.innerHTML = `<label>이름을 입력하쇼</label><input>
      <style> label { color : red } </style>`
  }
}

customElements.define("custom-input", 클래스);
<custom-input></custom-input>
<label>왜 나까지 빨개짐?</label>
 
스타일까지 함께 컴포넌트화하고싶으면 컴포넌트 안에 <style>을 집어넣는게 좋습니다.
근데 이렇게 label 태그를 빨간색으로 스타일링해놨는데
이럴 경우 컴포넌트와 관계없는 다른 태그까지 오염이 발생할 수 있습니다.

그렇다고 CSS 적으로 class를 만들어서 해결한다고 해도
다른 곳과 class가 겹치면 문제가 생기고 
아무튼 귀찮은 문제들이 발생합니다. 
그럴 땐 스타일을 shadow DOM 열어서 거기 집어넣으면 됩니다.
왜냐면 shadow DOM에 있는 스타일은 밖에 영향을 끼치지 않아서 그렇습니다. 

class 클래스 extends HTMLElement {
  connectedCallback() {
    this.attachShadow({mode : 'open'});
    this.shadowRoot.innerHTML = `<label>이름을 입력하쇼</label><input>
      <style> label { color : red } </style>`
  }
}

customElements.define("custom-input", 클래스);
<custom-input></custom-input>
<label>오 이제 바깥건 안빨개짐</label>
 
스타일과 태그들을 전부 shadow DOM으로 집어넣어놨더니
진짜 다른 태그들 스타일을 오염시키지 않습니다.
그래서 대부분 Web Component 만들 때 shadow DOM을 활용합니다.
이래야 진정한 의미의 html 모듈화 개발이 가능합니다. 
다른 모듈들이 서로 영향을 끼치는걸 막을 수 있으니까요. 

*html 임시보관함 <template> 태그
컴포넌트 만들 때 html이 너무 길어지면
<template>태그에 잠깐 보관해두고 집어넣을 수도 있습니다.

 <custom-input></custom-input>

  <template id="template1">
    <label>이메일을 입력하쇼</label><input>
    <style>label { color : red }</style>
  </template>

  <script>
    class 클래스 extends HTMLElement {
      connectedCallback() {
        this.attachShadow({mode : 'open'});
        this.shadowRoot.append(template1.content.cloneNode(true));
      }
    }
    customElements.define("custom-input", 클래스);
  </script>
1. <template>은 특수한 태그인데 여기에 적은 html은 렌더링되지 않습니다.
2. 그래서 거기에 html들 잠깐 보관하고 
3. this.shadowRoot.append(template1.content.cloneNode(true)) 이런 식으로 집어넣으면 됩니다. 
그냥 <template>태그 사용법입니다. 이러면 html이 길어져도 이쁘게 코드짤 수 있겠군요. 

*이벤트 리스너를 부착하고 싶다면
그냥 addEventListener 아무데나 코드짜서 부착하면 됩니다.
심지어 shadow DOM에도 이벤트리스너 부착 가능합니다.
알아서 합시다. 
 <custom-input></custom-input>

  <template id="template1">
    <label>이메일을 입력하쇼</label><input>
    <style>label { color : red }</style>
  </template>

  <script>
    class 클래스 extends HTMLElement {
      connectedCallback() {
        this.attachShadow({mode : 'open'});
        this.shadowRoot.append(template1.content.cloneNode(true));
        let el = this.shadowRoot.querySelector('label');
        el.addEventListener('click', function(){
          console.log('클릭함')
        })
      }
    }
    customElements.define("custom-input", 클래스);
  </script>
 
저는 shadow DOM 안의 label 태그를 누르면 콘솔창에 '클릭함' 출력하는 
이벤트리스너를 부착해봤습니다.
이런 식으로 개발하면 자바스크립트도 컴포넌트안에 담아서 보관할 수도 있습니다. 
이제 원하는 곳에서 class 만 export 해서 가져다 쓰면 컴포넌트로 모듈식 개발이 가능합니다. 

15 ?. / ?? 연산자 (optional chaining)
*?. optional chaining
object 자료에서 원하는 데이터 꺼내고 싶으면 마침표 찍으면 됩니다. 
근데 마침표와 똑같은 역할을 하는 ?. 문법이 있습니다. 
var user = {
    name : 'kim',
    age : 20
}

console.log(user.name);
console.log(user?.name);
용도는 마침표와 똑같은데 정확한 기능은 
?. 왼쪽에 있는게 null 혹은 undefined 인 경우 마침표찍지 말고 undefined 남겨주세요~
입니다.

*"중첩된 object 자료에서 에러없이 안전하게 데이터를 꺼낼 때" 사용하면 됩니다.
일단 중첩된 object 자료가 뭔소리냐면 
var user = {
    name : 'kim',
    age : { value : 20 }
}

console.log(user.age.value);
object 안에 object가 들어있는 경우를 말합니다.
이 경우 마침표 몇번 찍어야 안에 깊숙히 들어있는 자료를 출력할 수 있는데 자료를 잘못 찾는 경우 에러가 납니다.
var user = {
    name : 'kim',
    age : { value : 20 }
}

console.log(user.age1.value1) //에러남 ㅅㄱ
왜냐면 undefined, null 같은 것에다가 점찍으면 에러가 나서 그렇습니다.
근데 개발시 에러가 나는건 좋은겁니다. 내가 뭘 잘못했는지 찾아 수정할 수 있으니까요.
근데 실제 사이트라면 에러가 나면 큰일인데
에러가 난 부분 하단에 있는 코드들은 실행이 되지 않으니까 사이트가 이상하게 동작할 수 있습니다.
그걸 방지하고 싶으면 .age1 이게 있으면 .value1 해달라고 if 문법 쓰거나 그러면 됩니다.  
var user = {
    name : 'kim',
    age : { value : 20 }
}

console.log(user.age1?.value1) //에러는 안남 매우안전
if 쓰기 귀찮으면 ?. 쓰면 됩니다.
"왼쪽에 있는게 null, undefined면 마침표찍지말고 undefined를 남겨주세요" 라는 뜻이라 에러가 나지 않습니다.
var user = {
    name : 'kim'
}

console.log(user?.name1)
Q. 그럼 중첩된 object 말고 간단한 object 자료에서 데이터 뽑을 때도 ?. 쓰면 좋겠네요?
A. 원래 object에서 데이터뽑을 때 해당하는 자료가 없으면 자동으로 undefined가 남아서 그럴 필요 없습니다. 
근데 중첩된 object는 마침표를 2번 이상 찍습니다.
그런 경우 undefined에다가도 마침표를 찍을 수 있기 때문에 (에러 위험) 
?. 쓰면 안전할 수 있습니다. 
(참고) 오해하면 안되는게 ?. 이건 에러를 해결해주는 문법이 아니라 에러나지 않게 감추는 문법일 뿐입니다. 

*?? nullish coalescing operator
var user;

console.log(user ?? '로딩중')
?? 왼쪽이 null, undefined 일 경우 오른쪽 보여달라는 뜻입니다. 
이것도 비슷한 용도를 가지고 있는데

예를 들어 var user라는 변수를 유저에게 보여줘야한다고 합시다.
그래서 html안에 보여달라고 코드짜놨는데 
근데 var user가 ajax 요청 등 때문에 늦게 도착하면 어떻게 합니까? 

유저가 undefined 이런걸 볼 수도 있겠군요. 
그게 싫다면 user 안에 뭐가 들어있으면 html에 보여주세요~ 라고 if문을 쓰거나 그러면 되는데 
그게 귀찮으면 변수 우측에 ?? 붙이면 됩니다. 

user ?? '대신보여줄문자'
이러면 user 라는 변수에 아직 뭐가 없으면 오른쪽에 있는 문자를 대신 보여줍니다. 
특히 React, Vue 이런거 하다보면 데이터 늦게 도착하는게 일상인데
그런 라이브러리 쓸 때 좀 유용한 문법입니다. 

 