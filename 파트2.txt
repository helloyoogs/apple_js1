1강 자바스크립트 함수 업그레이드하기 (default parameter/arguments)
*함수의 default 파라미터 넣기
함수를 만들 때 파라미터값을 실수로 안적거나 했을 경우 파라미터에 기본값(default 값)을 줄 수 있습니다. 
ex)
function 더하기 (a, b = 10){
  console.log(a + b)
}

더하기(1);

*함수의 arguments
함수의 모든 파라미터들을 전부 한꺼번에 싸잡아서 다루고 싶은 경우가 있습니다. 
그럴 땐 arguments라는 키워드를 활용하시면 됩니다. 
함수 안에서 쓸 수 있는 미리 정의된 키워드 혹은 변수인데 한번 써보도록 합시다. 
function 함수(a,b,c){
  console.log(arguments)
}

함수(2,3,4);
그러면 콘솔창에 [2,3,4]를 담은 array 비슷한 자료가 출력됩니다. 
arguments는 즉, 모든 입력된 파라미터를 [ ] 안에 싸매주는 키워드였던 것이었습니다. 
파라미터들을 한꺼번에 다루고 싶을 때 자주 활용해주시면 됩니다. 

ex)콘솔창에 모든 파라미터를 하나씩 출력해주고 싶은 경우
function 함수(a,b,c){
  console.log(arguments[0])
  console.log(arguments[1])
  console.log(arguments[2])
}

함수(2,3,4);
이러면 되겠군요? 그런데 조금 더 확장성있게 반복문을 쓴다면
function 함수(a,b,c){
  for (var i = 0; i < arguments.length; i++){
    console.log(arguments[i])
  }
}

함수(2,3,4);
이러면 되겠군요. 편리하게 파라미터들을 다룰 수 있는 문법이었습니다. 

2강 함수에서 쓰는 점3개 Rest 파라미터를 알아봅시다
*Rest 파라미터
함수를 만들 때 ...이라는 기호를 파라미터 왼쪽에 추가가능합니다. 
function 함수2(...파라미터들){
  console.log(파라미터들)
}

함수2(1,2,3,4,5,6,7);
위 코드를 실행해보면 파라미터들이라는 변수를 출력해줍니다. 
파라미터들이라는 변수는 모든 파라미터를 [] array 안에 담고 있습니다. 
원하는 파라미터 왼쪽에 ... 기호를 붙여주시면 
"이 자리에 오는 모든 파라미터를 [] 중괄호로 감싸준 파라미터" 라는 뜻입니다. 
그래서 출력해보면 저렇게 [1,2,3,4,5,6,7]이 나오는 것이고요. 
그 자리에 입력한 모든 파라미터(1,2,3,4,5,6,7)를 중괄호에 감싸주는게 rest 파라미터입니다. 

*...을 다른 자리에 사용한다면 
그 자리에 있는 파라미터를 [] 안에 감싸준다고 했으면
다른 자리에 쓰면 어떻게 될까요?
function 함수2(a, b, ...파라미터들){
  console.log(파라미터들)
}

함수2(1,2,3,4,5,6,7);
위 코드를 실행해보면 [3,4,5,6,7]이 출력됩니다. 
첫 두개의 파라미터는 a, b로 쓰는데
a,b 그 뒤에 나오는 모든 파라미터는 중괄호에 감싸서 파라미터들이라는 array가 됩니다. 
파라미터 종류가 많을 경우 arguments 문법보다 다루기 쉽고 간단해서 자주 사용합니다. 

*쓰기 전 주의사항
rest(나머지) 파라미터라는 뜻대로 나머지 부분에만 사용가능합니다. 
그니까 항상 파라미터가 여러개면 rest는 항상 마지막 파라미터로 넣으셔야합니다. 
function 함수2(a, ...파라미터들, b){
  console.log(파라미터들)
}
이렇게 사용하시면 에러난다는 소리입니다. 

function 함수2(a, ...파라미터들, ...파라미터들2){
  console.log(파라미터들)
}
이것도 안됩니다. 2개 이상 사용할 수 없습니다. 

*간단한 연습문제 
모든 파라미터를 전부 하나씩 콘솔창에 출력해주는 함수를 만들고 싶습니다. 
function 함수(a, b, c){
  console.log(a);
  console.log(b);
  console.log(c);
}

함수(1,2,3);
파라미터 갯수 제한없이 똑같은 기능을 실행해주는 함수를 만들려면 어떻게 해야할까요?
function 함수(...rest){
  console.log(rest[0]);
  console.log(rest[1]);
  console.log(rest[2]);
  (...이하 쭉쭉쭉)
}

함수(1,2,3);
이렇게 하면 되는거 아닙니까. 근데 파라미터가 몇개 들어갈지 모르기 때문에 
console.log()부분을 반복문을 이용하면 더 깔쌈하게 만들 수 있습니다. 

function 함수(...rest){
  for (var i = 0; i < rest.length; i++) {
    console.log(rest[i]);
  }
}

함수(1,2,3,4,5,6,7,8);
rest라는게 모든 파라미터를 [] 안에 담아서 array처럼 만들어주는 고마운 변수기 때문에
반복문을 저렇게 돌릴 수 있습니다.  
그럼 이제 함수에 파라미터를 몇개를 넣든 간에 콘솔창에 계속 출력을 해줄 수 있습니다. 

5강 이상한 Reference data type과 더 이상한 예제 3개
*Primitive data type
자료 자체가 변수에 저장되는 자료들입니다. 
문자, 숫자 자료형들이 대표적인 primitive data type들입니다. 
var name = 'john';
var age = 20;
이렇게 문자나 숫자 자료형은 문자나 숫자가 변수에 직접 저장된다는 겁니다.

*Reference data type
Array, Object 자료형은 reference data type에 속합니다.
reference data type은 자료를 변수에 직접 저장하는게 아닌,
자료가 저쪽에 있습니다 라는 화살표 (레퍼런스)를 변수에 저장합니다.
var 사람 = { name : 'Kim' };
여러분 방금 { name : 'Kim' } 이라는 자료를 변수에 저장했습니다. 
하지만 변수에 저장된건 { name : 'Kim' } 이게 아닙니다. 
"{ name : 'Kim' }이 저기 저장되어있습니다"라는
{ name : 'Kim' } 값을 가리키는 화살표가 저장이 되어있을 뿐입니다. 

예제 1. 복사하면 이상한 일이 일어납니다.
한번 아주 직관적이고 간단한 Primitive 자료형부터 복사해보도록 합시다. 문자말입니다 문자.

var 이름1 = '김';
var 이름2 = 이름1;
이름1 = '박';

이름1, 이름2를 출력하면 각각 무엇이 나올까요?
이름1은 변경했으니 '박'이고, 이름2는 복사만했지 변경하진 않았으니 '김' 입니다. 
근데 똑같은 일을 reference data type으로 진행하면 이상한 일이 일어납니다. 

한번 Reference 타입 자료형인 object를 이용해 똑같이 해보도록 하겠습니다. 

var 이름1 = { name : '김' };
var 이름2 = 이름1;
이름1.name = '박';

그럼 이름1, 이름2를 출력하면 각각 무엇이 나올까요?
둘다 { name : '박' } 입니다.

예제 2. 화살표가 할당되는 기준 & object 두개가 같은지 비교해보기
var 이름1 = { name : '김' };
var 이름2 = { name : '김' };
Q. 바로 위의 예제에서 이름1 == 이름2 이렇게 두개를 같다고 비교하면 true가 나올까요 false가 나올까요?
A. false가 나옵니다. 

왜냐면 이름1과 이름2에 저장된건 데이터가 아니라 화살표랬죠?
== 등호로 비교하고 계신건 지금 object 두개가 아닙니다. 화살표 두개입니다. 
화살표가 같으면 (같은 곳을 가리키면) true가 나오고, 화살표가 같지 않으면 false가 나오기 때문입니다. 

예제 3. 함수를 이용해 object를 변경하면 어떻게 될까
var 이름1 = { name : '김' };

function 변경(obj){
  obj = { name : 'park' };
}

변경(이름1);

Q. 근데 실행해봐도 이름1은 바뀌지 않습니다. 왜 그럴까요?
obj라는 변수에 새로운 화살표를 재할당을 한 것이지
실제 이름1이라는 변수는 전혀 건드리지 않고 있습니다. 
그래서 결국 이름1은 바뀌지 않는 것입니다. 

6강 객체지향1. Object 생성기계인 constructor를 만들어 써보자
*오브젝트에 함수가 들어가야 한다면
학생1.sayHi()라고 사용하시면 콘솔창에 "안녕하세요 'Kim'입니다"라고 이름이 포함된 인삿말을 출력해주어야합니다. 
어떻게 코드를 짜면 될까요? 

var 학생1 = { 
    name : 'Kim', 
    age : 15 
    sayHi : function(){
        console.log('안녕하세요' + this.name + ' 입니다');
    }
};

학생1.sayHi();
근데 학생1이라는 곳에다가만 하드코딩하는게 아니라
앞으로 모든 학생들이 sayHi()를 쓸 수 있게 만들고 싶으면 어떻게 해야할까요? 
당연히 오브젝트 생성 기계에 추가하시면 되겠죠? 기계에 sayHi()를 추가해봅시다.
function 기계(){
  this.name = 'Kim';
  this.age = 15;
  this.sayHi = function(){
    console.log('안녕하세요' + this.name + ' 입니다');
  }
}
var 학생1 = new 기계();
var 학생2 = new 기계();

학생2.sayHi();
기계에 저렇게 this.sayHi 를 추가하시면 이제 기계로부터 생성되는 모든 학생들이 sayHi()를 가지고 있게 됩니다.
그럼 학생1, 학생2 전부 sayHi()를 쓸 수 있게됩니다. 

*학생 오브젝트를 뽑을 때 각각 다른 name, age 값을 부여하고 싶다면
function 기계(이름){
  this.name = 이름;
  this.age = 15;
  this.sayHi = function(){
    console.log('안녕하세요' + this.name + ' 입니다');
  }
}
var 학생1 = new 기계('Park');
var 학생2 = new 기계('Kim');

Q2. 상품마다 부가세() 라는 내부 함수를 실행하면 콘솔창에 상품가격 * 10% 만큼의 부가세금액이 출력되도록 하고 싶으면
constructor를 어떻게 수정해야할까요?
예를 들면 product1.부가세() 이렇게 쓰면 콘솔창에 5000이 출력되어야합니다. 

function Product(상품명, 가격){
  this.name = 상품명;
  this.price = 가격;
  this.부가세 = function(){
    console.log(this.price * 0.1)
  }
}

var product1 = new Product('shirts', 50000);
var product2 = new Product('pants', 60000);
그럼 product1과 product2는 각각 name, price 그리고 부가세()라는 속성을 가지게 됩니다. 

7강 객체지향2. 이거 보고 prototype 이해 못하면 강의 접습니다
function 기계(){
  this.name = 'Kim';
  this.age = 15;
}

기계.prototype.gender = '남';
var 학생1 = new 기계();
var 학생2 = new 기계();

console.log(학생1.gender); //'남'이 출력됩니다

기계의 prototype, 즉 유전자에 gender : '남'이라는 데이터를 추가한 것입니다.
이제 학생1, 학생2 같은 기계로부터 생성되는 모든 자식들은 gender라는 속성을 사용할 수 있습니다.

Q. 그럼 prototype으로 상속시키는거랑 constructor로 상속시키는거랑 차이가 뭐죠?
A. 자식들이 값을 직접 소유하게 만들고 싶으면 constructor로 상속시키시면 되고
부모만 가지고 있고 그걸 참조해서 쓰게 만들고 싶으면 prototype으로 상속시키면 되겠쥬?
보통은 그래서 상속할 수 있는 함수 같은 것들은 prototype으로 많이 만들어놓습니다. 

8강 객체지향3. prototype의 특징 몇가지
1. prototype은 constructor 함수에만 몰래 생성됩니다
일반 object, array 이런거 만들어도 거기엔 prototype이 없습니다. 
그럼 일반 object 같은걸 상속하고 싶으면 어떻게 하냐고요?
constructor 함수를 만들던가.. 아니면 다음 시간에 알려주는 Object.create()를 쓰거나 class를 쓰거나 셋 중 하나 하시면 됩니다. 

2. 내 부모님 유전자를 찾고 싶다면 __proto__를 출력해보시면 됩니다. 
부모로부터 생성된 자식 object들은 __proto__라는 속성이 있습니다.
이걸 출력해보시면 부모의 prototype이 출력됩니다.
그래서 __proto__는 부모의 prototype과 같은 의미입니다. 

function 기계(){
  this.name = 'Kim';
  this.age = 15;
}
var 학생1 = new 기계();
console.log(학생1.__proto__);
console.log(기계.prototype);

학생1.__proto__
기계.prototype
각각 출력해보시면 똑같은게 나오죠? 
아무튼 그래서 "__proto__는 부모 prototype을 의미한다" 라고 알아두시면 되겠습니다.

3. __proto__를 직접 등록하면 object끼리 상속기능을 구현가능합니다.
var 부모 = { name : 'Kim' };
var 자식 = {};

자식.__proto__ = 부모;
console.log(자식.name);

지금 부모와 자식 object를 하나씩 만들었습니다. 
그리고 셋째줄에서 자식의 __proto__에 부모를 집어넣었습니다. 
그럼 자식의 부모 유전자는 { name : 'Kim' } 이라는 오브젝트가 되는 것입니다. 
그렇게 되면 자식은 이제 자식.name 속성을 자유롭게 사용할 수 있습니다.

4. 실은 콘솔창에 prototype 정보들이 항상 출력됩니다.
이거 여기 예제코드 적어놓으신 다음에 
콘솔창에서 학생1 한번 출력해보십시오.

function 기계(){
  this.name = 'Kim';
  this.age = 15;
}
기계.prototype.gender = '남';

var 학생1 = new 기계();

그럼 콘솔창에 name도 나오고 age도 나올 텐데
이상한 __proto__ 이런 것도 나옵니다

10강 (간만에 쉬운거) ES5방식으로 쉽게 구현하는 상속기능
*Object.create() 사용하기
var 부모 = { name : 'Kim', age : 50 };
var 자식 = Object.create(부모);

console.log(자식.age); //50나옴
▲위 예를 보면 자식이라는 object는 부모를 prototype으로 두게 됩니다. 
그럼 자식.name 해도 'Kim'이 출력되고요, 자식.age 해도 50이 출력됩니다. 
자식이 성공적으로 부모 속성들을 상속했죠? 상속기능 만들기 끝입니다. 

*그럼 자식이 age를 바꾸고 싶으면 어떻게 하죠?
var 부모 = { name : 'Kim', age : 50 };
var 자식 = Object.create(부모);
자식.age  = 20;

console.log(자식.age); //20 나옴

그냥 자식이라는 object에 age : 20 이라는 값을 부여했을 뿐입니다. 
그럼 이제 자식.age 할 때마다 20이 출력됩니다. 

Q. 부모로부터 상속받은 50이라는 age가 출력되지 않는 이유는 뭐죠?
자바스크립트 오브젝트 자료형에서 특정 자료를 꺼낼 때 묻는 순서가 있다고 배웠었습니다. 
자식.age를 꺼내주세요~ 라고 하면 
1. 자식이라는 object가 직접 age를 가지고 있으면 그거 출력
2. 없으면 자식의 부모 prototype을 뒤져서 age가 거기 있으면 그거 출력
3. 거기도 없으면 부모의 부모 prototype을 뒤져서.. 
이런 순서로 age를 출력합니다. 
그래서 지금 자식놈은 20이 나오는 것입니다. 

*손자도 쉽게 만들 수 있습니다. 
var 부모 = { name : 'Kim', age : 50 };
var 자식 = Object.create(부모);
자식.age  = 20;

var 손자 = Object.create(자식);

console.log(손자.age);

손자를 만들었습니다.
얘는 자식과 부모가 가진 속성들을 전부 물려받는 애입니다. 
그럼 손자.age하면 무엇이 나올까요?
20이 출력됩니다

Q. 왜 20이 나오는지 궁금하다면  
1. 손자에 age가 있는지 확인하고
2. 없으면 부모 prototype에 있는지 확인하고
3. 거기도 없으면 부모의 부모 prototype에 있는지 확인하고..
그렇게 하나씩 확인해서 젤 가까운 age를 출력시키기 때문입니다. 

11강 객체지향4. ES6방식으로 안쉽게 구현하는 상속기능 (class)
*ES6 class 키워드로 구현하는 constructor 기계만들기
class 부모 {
  constructor(){
    this.name = 'Kim'
  }
}

var 자식 = new 부모();
new 키워드를 이용해서 방금 만든 부모라는 기계에서 오브젝트를 새로 생성할 수 있는 것이고요.
constructor()라고 쓴 부분에 예전처럼 this.name 어쩌구 하시면 새로 생성되는 오브젝트들에 값을 부여할 수 있습니다. 

*상속가능한 함수를 추가하려면 어떻게 해야할까요?
방법1. 함수를 this.sayHi 이렇게 constructor 안에 추가하는 방법
class 부모 {
  constructor(){
    this.name = 'Kim';
    this.sayHi = function(){ console.log('hello') }
  }
}
var 자식 = new 부모();

그럼 새로생성되는 자식은 sayHi() 함수를 직접 가지게 되며 자유롭게 쓸 수 있습니다.

방법2. 기계의 prototype에 추가하는 방법
class 부모 {
  constructor(){
    this.name = 'Kim';
  }
  sayHi(){ 
    console.log('hello') 
  }
}
var 자식 = new 부모();

오브젝트에 함수추가하듯 하시면 됩니다요. 
그럼 자식은 sayHi()라고 썼을 때 부모의 prototype에 있던 sayHi() 함수를 쓸 수 있습니다.
(혹은 그냥 부모.prototype.sayHi = function(){} 이렇게 하셔도 되고요)

*참고로 알아두는 Object.getPrototypeOf()
이 함수 안에 오브젝트를 넣으시면 부모 prototype을 출력해줍니다. 
이 오브젝트가 대체 누구로부터 prototype을 상속받고 있는지를 알려주는 함수죠.
__proto__라는 키워드와 비슷한 역할을 한다고 보시면 됩니다

*constructor안에 파라미터 추가하기
class 부모 {
  constructor(이름, 나이){
    this.name = 이름;
    this.age = 나이;
  }
}
var 자식 = new 부모('Park', 30);

*prototype 내에 함수 여러개 추가하기
class 부모 {
  constructor(이름, 나이){
    this.name = 이름;
    this.age = 나이;
  }
  sayHi(){
    console.log('안녕');
  }
  sayHello(){
    console.log('안녕하세요');
  }
}

var 자식 = new 부모('Park');

12강 객체지향5. class를 복사하는 extends / super 14:20 강의 마저 듣고 필기하기
*class를 상속한 class를 만들고 싶을 때 쓰는 extends
class 할아버지{
  constructor(name){
    this.성 = 'Kim';
    this.이름 = name;
  }
}

new 할아버지() 뭐 이런식으로 하면 새로운 object를 쉽게 생성할 수 있겠죠?
그런데 이 class가 너무나도 유용한 나머지 이것과 유사한 class를 하나 더 만들고 싶습니다. 
그러면 직접 class를 하나 더 만들어서 내용을 복붙하면 되겠죠?
하지만 class안에 복사할 내용이 너무나도 많으면 코드가 너무나도 길어집니다. 

extends를 이용해서 class를 만드시면 기존에 있던 class의 내용을 그대로 복붙해서 만들어낼 수 잇습니다. 
있어보이게 말하면 "다른 class를 상속해서 만들 수 있게 도와주는 문법"이죠. 
그래서 할아버지 class를 상속하는 아버지 class를 만들어보겠습니다. 

class 할아버지{
  constructor(name){
    this.성 = 'Kim';
    this.이름 = name;
  }
}

class 아버지 extends 할아버지{

}

extends는 이렇게 쓰면 됩니다. 
new 아버지('만수'); 이렇게 하시면 성과 이름을 가진 object 자료가 하나 생성됩니다.
할아버지랑 똑같은 class가 생겼죠? extends 문법 끝!

*근데 아버지라는 class에는 새로운 속성을 추가하고 싶으면 
class 할아버지{
  constructor(name){
    this.성 = 'Kim';
    this.이름 = name;
  }
}

class 아버지 extends 할아버지{
  constructor(){
    this.나이 = 50;
  }
}
이렇게 하면 new 아버지() 했을 때 생성된 오브젝트들은 {성, 이름, 나이} 속성들을 가지겠군요. 
하지만 super를 써야된다고 에러가 나네요. 
그럼 super를 써주시면 됩니다. 

class 할아버지{
  constructor(name){
    this.성 = 'Kim';
    this.이름 = name;
  }
}

class 아버지 extends 할아버지{
  constructor(){
    super();
    this.나이 = 50;
  }
}
super()라는 이상한 함수는
"extends로 상속중인 부모 class의 constructor()"를 의미합니다. (암기사항)
쉽게 말하면 할아버지 class의 constructor() 이거랑 똑같다는 소리입니다. (암기해야됨)
그래야 이제 에러없이 this.나이 이런걸 추가하실 수 있습니다. (암기 ㄱ)

근데 할아버지 class의 constructor()에는 name 파라미터를 입력할 수 있었죠?
그것도 똑같이 따라서 명시해주셔야 할아버지가 가진 모든 속성들을 정확히 상속받을 수 있습니다. 

class 할아버지{
  constructor(name){
    this.성 = 'Kim';
    this.이름 = name;
  }
}

class 아버지 extends 할아버지{
  constructor(name){
    super(name);
    this.나이 = 50;
  }
}
할아버지 constructor()에 name이라는 파라미터가 있던걸 그대로 아버지 constructor()에도 따라했습니다. 
(파라미터 작명은 자유롭게 가능합니다)
이제 그럼 new 아버지(); 할 때 파라미터를 입력하면 this.이름 속성에 들어가게 되겠네요.

Q. 위 코드 하단에 var a = new 아버지('만수'); 이렇게 적으면 a라는 변수는 어떤 내용을 가지고 있을까요?
1. a라는 변수는 아버지라는 class로부터 새로 생성된 오브젝트입니다. 
2. 그래서 할아버지가 가지고 있던 성, 이름 그리고 아버지가 가지고 있던 나이를 전부 물려받았습니다.  
3. 그리고 this.이름 자리에는 '만수'를 넣어 실행했습니다.  
그래서 { 성 : 'Kim', 이름 : '만수', 나이 : 50 } 이라는 오브젝트가 됩니다. 

*할아버지에 메소드(함수)를 추가한다면
class 할아버지{
  constructor(name){
    this.성 = 'Kim';
    this.이름 = name;
  }
  sayHi(){
    console.log('안녕 나는 할아버지')
  }
}

class 아버지 extends 할아버지{
  constructor(name){
    super(name);
    this.나이 = 50;
  }
}
var a = new 아버지('만수');

그럼 이제 a라는 오브젝트는 sayHi()라는 함수를 쓸 수 있을까요?
- 쓸 수 있습니다. 

a라는 오브젝트가 a.sayHi() 이렇게 사용한다면
1. a라는 오브젝트에 sayHi가 있는지 물어보고
2. 없으면 아버지.prototype에 sayHi가 있는지 물어보고 
3. 없으면 할아버지.prototype에 sayHi가 있는지 물어보고 
이런 식으로 sayHi를 실행하기 위해 부모님을 뒤져봅니다. 

근데 sayHi()라는건 할아버지.prototype에 추가된 함수이기 때문에 
a라는 오브젝트는 sayHi() 함수를 실행할 수 있습니다. 

*근데 class간에 함수를 상속하고 싶으면 어떻게 해요?
class 할아버지{
  constructor(name){
    this.성 = 'Kim';
    this.이름 = name;
  }
  sayHi(){
    console.log('안녕 나는 할아버지')
  }
}

class 아버지 extends 할아버지{
  constructor(name){
    super(name);
    this.나이 = 50;
  }
  sayHi2(){
    console.log('안녕 나는 아버지');
    super.sayHi();
  }
}
var a = new 아버지('만수');

super라는걸 저렇게 prototype 함수 안에서 쓰시면 아까의 super와 약간 다른 의미가 됩니다.
여기서의 super는 부모 class의 prototype을 의미합니다. 
알겠쥬? super는 뜻이 두개입니다.
1. constructor 안에서 쓰면 부모 class의 constructor
2. prototype 함수 안에서 쓰면 부모 class의 prototype
입니다. 아이고 외우기 힘드니까 2번은 참고로만 알아둡시다. 

Q. 그럼 위의 예제 코드에서 a.sayHi2()를 실행하면 무엇이 콘솔창에 출력될까요?
a.sayHi2()를 사용하신다면 아버지.prototype에 있던 sayHi2 함수가 동작합니다. 
그 함수는 일단 console.log('안녕 나는 아버지')를 실행하고
둘째 줄에서 super.sayHi()를 실행합니다. 이건 다른말로 할아버지.prototype.sayHi()와 똑같기 때문에
console.log('안녕 나는 할아버지')를 실행할 것입니다. 
그래서 콘솔창에 "안녕 나는 아버지" "안녕 나는 할아버지"가 출력됩니다.

13강 getter, setter 대체 왜 쓰는지 알아보기
*함수로 object 데이터를 꺼내는 방법
var 사람 = {
  name : 'Kim',
  age : 30,
}
그 다음에 여러분의 내년 나이를 출력해보고 싶으면 어떻게 할까요?
사람.age + 1 이렇게 하면 될까요? 내년 나이를 출력해주는 함수를 만들어 사용합니다. 
var 사람 = {
  name : 'Kim',
  age : 30,
  nextAge(){
    return this.age + 1
  }
}
사람.nextAge() 이렇게 사용하면 내년 나이가 출력되겠죠? 31이라고 출력되겠네요. 
굳이 왜 이렇게 하냐면 
- object 안의 데이터가 복잡할 수록 함수 만들어놓는게 데이터 꺼내기 쉽습니다.
- 내부에 있는 name, age 변수를 건드리지 않아서 실수를 방지할 수 있어서 안전합니다.
특히 매우 긴 object 안에 원하는 자료 몇개만 뽑고 싶을 때
미리 저렇게 함수를 만들어놓으면 매번 기능개발해줄 필요가 없습니다.

*함수로 object 데이터를 수정하는 방법
var 사람 = {
  name : 'Kim',
  age : 30,
  setAge(나이){
    this.age = 나이
  }
}
setAge()라는 함수를 오브젝트 내에 추가했습니다.
그리고 이 함수는 파라미터를 한개 입력할 수 있는데 그 파라미터를 그대로 this.age에 집어넣어주는 역할을 합니다. 
그럼 이제 사람.setAge(40) 이렇게 쓰시면 자유롭게 나이 변경이 가능합니다.  
사람.age = 40 이렇게 쉽게 안하고
사람.setAge(40) 굳이 이렇게 하는 이유는 
- 내부에 있는 name, age 변수를 직접 건드리지 않아서 실수를 방지할 수 있습니다.

근데 데이터 수정하는 함수를 사용하시면 살짝 안전장치를 더해줄 수 있습니다. 
var 사람 = {
  name : 'Kim',
  age : 30,
  setAge(나이){
    this.age = parseInt(나이)
  }
}
사람.setAge('200'); //문자 넣었는데도 숫자 200으로 저장됨

▲ setAge()라는 함수안에 기능을 하나 추가했죠?
parseInt()라는 함수는 '40'같은 문자를 숫자 40으로 바꿔주는 고마운 자바스크립트 내장함수입니다. 

*함수 쓰기 복잡하다면 get/set 키워드를 붙이자
var 사람 = {
  name : 'Kim',
  age : 30,
  set setAge(나이){
    this.age = parseInt(나이)
  }
}
사람.setAge = 40; //set 키워드를 추가하면 이렇게 함수를 사용가능

▲ setAge() 함수 만들 때 왼쪽에 set이라는 키워드를 추가하시면 
이제 등호로 데이터를 입력하거나 하실 수 있습니다. 
그리고 set 붙은 함수들은 setter라고 부릅니다. (데이터를 set 하는 (수정하는) 함수라는 뜻)

var 사람 = {
  name : 'Kim',
  age : 30,
  get nextAge(){
    return  this.age + 1  
  }
}
console.log( 사람.nextAge ) //get 키워드를 추가하면 이렇게 함수를 사용가능

▲ nextAge()라는 함수를 만들 때는 get 키워드를 사용가능합니다. 
그러면 이제 소괄호 없이 nextAge를 사용해서 데이터를 꺼낼 수 있습니다. 
그리고 get 붙은 함수들은 getter라고 부릅니다. (데이터를 get하는 (가져오는) 함수라는 뜻)

*get/set 사용하는 기준은 
그냥 데이터를 뽑아주는, 가져와주는, get 해주는 함수들은 get 쓰시면 되고
데이터를 입력해주는, 수정해주는, set 해주는 함수들은 set 쓰시면 됩니다. 
그리고 규칙도 있습니다.
set 함수는 데이터를 입력해서 수정해주는 함수니까 파라미터가 한개 꼭 존재해야하고
get 함수는 파라미터가 있으면 안되고 함수 내에 return을 가져야합니다.

*class에서 사용하는 get/set
 class 안에서 함수 만들 때 get/set 키워드를 이용해서 getter/setter 식으로 함수를 만들 수 있습니다. 

class 사람 {
  constructor(){
    this.name = 'Park';
    this.age = 20;
  }
  get nextAge(){
    return this.age + 1
  }
  set setAge(나이){
    this.age = 나이;
  }
}

var 사람1 = new 사람();
class 안의 함수들을 getter/setter로 만들어 쓰고 싶으면 이렇게 하시면 됩니다. 
이제 새로 뽑인 object인 사람1은 
사람1.nextAge;
사람1.setAge = 50;
이렇게 사용하실 수 있겠군요.

class에서의 getter/setter 용도는 위에서 설명한 내용과 똑같습니다. 
새로 뽑힌 오브젝트들 내용을 편리하게 수정할 때 사용합니다. 
굳이 get/set 키워드가 없어도 상관없습니다. 